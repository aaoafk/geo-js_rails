require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/ip_addresses", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # IpAddress. As you add validations to IpAddress, be sure to
  # adjust the attributes here as well.

  describe "GET /index" do
    it "renders a successful response" do
      get ip_addresses_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      ip_address = IpAddress.first
      get ip_address_url(ip_address), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new IpAddress" do
        expect {
          post ip_addresses_url,
               params: { ip_address: valid_attributes }, headers: valid_headers, as: :json
        }.to change(IpAddress, :count).by(1)
      end

      it "renders a JSON response with the new ip_address" do
        post ip_addresses_url,
             params: { ip_address: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new IpAddress" do
        expect {
          post ip_addresses_url,
               params: { ip_address: invalid_attributes }, as: :json
        }.to change(IpAddress, :count).by(0)
      end

      it "renders a JSON response with errors for the new ip_address" do
        post ip_addresses_url,
             params: { ip_address: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "GET /filter" do
    it "filters ip addresses as expected" do
      # Simulate the values you want to filter by
      country_code_value = 'US'
      city_value = 'New York'

      # Make the API request to filter ip addresses
      get filter_ip_addresses_path, params: { country_code: country_code_value, city: city_value }
    
      # Parse JSON response
      json_response = JSON.parse(response.body)
    
      # Get the count from the database directly using the scopes or ActiveRecord query
      expected_count = IpAddress.filter_ip_address_by_country_code(country_code_value).filter_ip_addresses_by_city(city_value).count
    
      # Compare the two counts
      expect(json_response.size).to eq(expected_count)
    end
  end
end
